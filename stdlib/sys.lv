' The sys namespace contains declarations of the Lavender built in functions.
' These functions have intrinsic implementations in the Lavender interpreter.

' `undefined` is the value returned by malformed dynamic function calls
' and piecewise functions on fallthrough.
def undefined() => native

' Returns whether the value is defined. A value is defined iff it is not
' equal to `undefined`.
def defined(val) => native

' Returns the internal type of `val`.
def typeof(val) => native

' Returns the `idx`th value captured by `val`. Returns `undefined` if
' `val` does not capture or if `idx` is out of range.
def cval(val, idx) => native

' Concatenates many vects into a single vect. For example, the expression
' `cat({ 1, 2 }, {}, 3, { 4, 5 })` results in `{ 1, 2, 3, 4, 5}`.
def cat(...vals) => native

' Calls the given function with the given vect of arguments. The expression
' `call(f, { a, b, ... })` is equivalent to `f(a, b, ...)`.
def call(func, args) => native

' The following functions are stubs for basic operations on the built in types
' num, int, str, and vect. You should not consider these to be part of the
' sys public API.

def __str__(val) => native
def __num__(val) => native
def __int__(val) => native
def __bool__(val) => native
def __eq__(a, b) => native
def __lt__(a, b) => native
def __ge__(a, b) => native
def __add__(a, b) => native
def __sub__(a, b) => native
def __mul__(a, b) => native
def __div__(a, b) => native
def __idiv__(a, b) => native
def __rem__(a, b) => native
def __pow__(a, b) => native
def __pos__(a) => native
def __neg__(a) => native
def __len__(a) => native
def __map__(val, f) => native
def __filter__(val, f) => native
def __fold__(val, id, f) => native
def __slice__(val, a, b) => native
def __concat__(a, b) => native
def __take__(val, f) => native
def __skip__(val, f) => native
