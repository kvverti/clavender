' The hof namespace contains Higher Order Functions and operations
' useful for them. Some of the functions defined here are
' the functional analogue of the value-based functions in the global
' namespace (for example, '<|' and 'onlyIf').

@import global using _

' The identity function. For all inputs 'a', '[Identity](a) = a'
def Identity() => def value(a) => a

' Returns a constant function of the given value.
def Constant(value) => def impl(a) => value

' Returns the composition of 'f' and 'g'. The returned function
' is equivalent to 'f(g(a))' for all inputs 'a'.
def r_o(f, g) => def impl(a) => f(g(a))

' Returns a function equivalent to applying the function
' 'f' and then 'g' on inputs. This is equivalent to the composition of 'g'
' and 'f'.
def i_andThen(f, g) => def impl(a) => g(f(a))

' Returns a function equivalent to applying the function
' 'g' where 'f' is undefined, and 'f' otherwise. This is equivalent
' to the expression 'f(a) else g(a)' for all a.
def i_orElse(f, g) => def impl(a) => f(a) else g(a)

' Returns the restriction of 'func' to the domain defined by 'pred'.
' Also known as the left restriction of func to the domain.
' You can think of this as the function version of 'onlyIf'.
def i_<|(func, pred) => def impl(a) => func(a) ; pred(a)

' Alternative spelling of '<|'.
def i_restrictLeft(func, pred) => func <| pred

' Returns a function which restricts the output of the given function based
' on the given predicate. Also known as the right restriction of 'func'
' onto the range. The function returns the result of 'func' if and
' only if the predicate returns true, else the function returns undefined.
def i_|>(func, pred) => (Identity <| pred) o func

' Alternative spelling of '|>'.
def i_restrictRight(func, pred) => func |> pred

' Binds the left operand of a binary operator.
def bindLeft(op, left) => def impl(right) => op(left, right)

' Binds the right operand of a binary operator.
def bindRight(op, right) => def impl(left) => op(left, right)

' Returns a function that calls its argument with the given args.
def withArgs(...args) => bindRight(\sys:call, args)

' Returns a function that folds any number of values using the given
' combining function.
def folding(id, func) => def impl(...vals) => vals fold (id, func)

' The constant function of true.
def True() => Constant(1)

' The constant function of false.
def False() => Constant(0)

' Returns a predicate from the given function. A predicate
' returns true if the result is truthy, and false if the
' result is falsy.
def pred(func) => def impl(a) => bool(func(a))

' Returns the logical negation of the given function. The returned function
' returns 'true' where the given function returns a falsy value, and similarly
' for 'false' and truthy values.
def not(func) => def impl(a) => !(func(a))

' Returns the intersection of the given functions. The returned function
' returns true if and only if both input functions return true.
def i_and(f, g) => def impl(a) => f(a) && g(a)

' Returns the union of the given functions. The returned function
' returns true if and only if at least one of the input functions return true.
def i_or(f, g) => def impl(a) => f(a) || g(a)

' Returns the symmetric difference of the given functions. The returned
' function returns true if and only if exactly one of the input functions
' returns true.
def i_xor(f, g) => def impl(a) => f(a) ^ g(a)

' Returns the union of the given predicates. This is generally more
' space efficient than the equivalent construction using `or`.
(def union(...preds)
    let siz(len(preds)) =>
    (def impl(a) =>
        (def call(idx)
            => false ; idx = siz
            => true ; preds(idx)(a)
            => call(idx + 1) ; 1
        )(0)
    )
)

' Returns the intersection of the given predicates. This is generally
' more space efficient than the equivalent construction using `and`.
(def intersection(...preds)
    let siz(len(preds)) =>
    (def impl(a) =>
        (def call(idx)
            => true ; idx = siz
            => call(idx + 1) ; preds(idx)(a)
            => false ; 1
        )(0)
    )
)
