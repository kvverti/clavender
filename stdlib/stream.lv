' A stream represents a lazily evaluated, possibly infinite sequence
' of values. Every stream is driven by a generator, whose values are
' transformed according to the functions applied to the stream.

@import global using _
@import hof using _
@import generator

' Returns a stream that contains the elements of the given generator.
def Stream(gen) => _StreamWrapper(gen, _ExtractingStream)

' Returns a stream whose elements are the result of repeatedly
' applying the given function.
def iterate(seed, f) => Stream(generator:of(seed, f))

' Uses the given function to generate a stream based on a number of previous
' values. The function should take the same number of arguments as specified
' in the prefix, and receives arguments in sequence order. For example,
' the Fibonacci sequence can be generated with `recursive(\+\, 0, 1)`.
(def recursive(func, ...prefix) =>
    Stream(generator:withMap(prefix, _nextSeeded(func), \head))
)

def _nextSeeded(func) => def(a) => tail(a) ++ { sys:call(func, a) }

' Uses the given function to generate a stream based on a number of previous
' values and the current index. The function should receive the index as the
' first argument; subsequent arguments are the previous elements in sequence
' order. For example, the factorial sequence can be generated with
' `indexRecursive(\*\, 1)`.
(def indexRecursive(func, ...prefix) =>
    Stream(generator:withMap({ 1 } ++ prefix, _nextRecSeeded(func), withArgs(1)))
)

(def _nextRecSeeded(func) =>
    def(a) => { head(a) + 1 } ++ tail(tail(a)) ++ { sys:call(func, a) }
)

' The infinite stream of natural numbers.
def Indices() => Stream(generator:of(0, bindRight(\+\, 1)))

' Returns a stream containing the first `n` elements of the given sequence.
def i_take(seq, n) => seq zip Indices takeWhile (def(a) => a(1) < n) map withArgs(0)

' Returns the tail of the given sequence after `n` elements.
def i_skip(seq, n) => seq zip Indices skipWhile (def(a) => a(1) < n) map withArgs(0)

' Basic stream.
(def _BaseStream(transValueImpl) =>
    (def obj(a)
        => \_head ; a = \head
        => \_tail ; a = \tail
        => (def(f) => _MappingStream(f, \obj)) ; a = \map\
        => (def(f) => _FlatmappingStream(f, \obj)) ; a = \flatmap\
        => (def(f) => _FilteringStream(f, \obj)) ; a = \filter\
        => (def(f) => _TakingStream(f, \obj)) ; a = \takeWhile\
        => (def(f) => _SkippingStream(f, \obj)) ; a = \skipWhile\
        => (def(other) => _ZippingStream(other, \obj)) ; a = \zip\
        => transValueImpl ; a = \_transValue
        => \_folder ; a = \fold\
    )
)

' Basic stream after flatmapping. Because of lazy evaluation, we do not
' unpack the objects returned by flatmap, so we need a different base stream.
(def _PostFlatBaseStream(transValueImpl) =>
    (def obj(a)
        => \_flatHead ; a = \head
        => \_flatTail ; a = \tail
        => (def(f) => _PostFlatMappingStream(f, \obj)) ; a = \map\
        => (def(f) => _PostFlatFlatmappingStream(f, \obj)) ; a = \flatmap\
        => (def(f) => _PostFlatFilteringStream(f, \obj)) ; a = \filter\
        => (def(f) => _PostFlatTakingStream(f, \obj)) ; a = \takeWhile\
        => (def(f) => _PostFlatSkippingStream(f, \obj)) ; a = \skipWhile\
        => transValueImpl ; a = \_transValue
        => \_postFlatFolder ; a = \fold\
    )
)

' Concatenating streams is implemented with a special generator.
' Warning: slow!
def _StreamConcat(seq1, seq2) => _StreamWrapper(_concatGen(seq1, seq2), _ExtractingStream)

(def _concatGen(seq1, seq2) =>
    generator:withMap({ seq1, seq2 }, \_concatTail, \_concatHead)
)

def _concatHead(seqs) => head(seqs(0))

(def _concatTail(seqs)
    let t0(tail(seqs(0)))
    => { t0 } ; len(seqs) = 1
    => { t0, seqs(1) } ; sys:defined(head(t0))
    => { seqs(1) } ; 1
)

' Zipping streams after a flatmap operation is implemented with a special
' generator. Warning: slow!
def _StreamZipped(seq1, seq2) => _StreamWrapper(_zippedGen(seq1, seq2), _ExtractingStream)

(def _zippedGen(seq1, seq2) =>
    generator:withMap({ seq1, seq2 }, \_zipTail, \_zipHead)
)

(def _zipHead(seqs)
    let t1(tail(seqs(0))), t2(tail(seqs(1)))
    => { head(seqs(0)), head(seqs(1)) } ; sys:defined(t1) && sys:defined(t2)
)

(def _zipTail(seqs)
    let t1(tail(seqs(0))), t2(tail(seqs(1)))
    => { t1, t2 } ; sys:defined(t1) && sys:defined(t2)
)

' Allows easy storage of the source for a stream.
(def _StreamWrapper(gen, stream) =>
    (def obj(a)
        => __yes__ ; a = __object__
        => "Stream(...)" ; a = \str
        => stream(\head)(gen, stream) ; a = \head
        => stream(\tail)(gen, stream) ; a = \tail
        => (def(id, f) => stream(a)(stream, f)(gen, id)) ; a = \fold\
        => (def(f) => _StreamWrapper(gen, stream(a)(f))) ; sys:defined(stream(a))
        => (def(other) => _StreamZipped(\obj, other)) ; a = \zip\
        => (def(other) => _StreamConcat(\obj, other)) ; a = \++\
    )
)

(def _head(gen, stream)
    let val(stream(\_transValue)(gen)(1))
    => val ; sys:defined(val)
)

(def _tail(gen, stream)
    let val(stream(\_transValue)(gen))
    => _StreamWrapper(val(0), stream) ; sys:defined(val)
)

(def _flatHead(gen, stream)
    let val(stream(\_transValue)(gen)(1))
    => head(val) ; sys:defined(val)
)

' Warning: slow! Internally this function concats the tail of the
' calculated value with the stream.
(def _flatTail(gen, stream)
    let val(stream(\_transValue)(gen))
    => sys:undefined ; !sys:defined(val)
    => _StreamWrapper(val(0), stream) ; !sys:defined(tail(val(1)))
    => _StreamConcat(tail(val(1)), _StreamWrapper(val(0), stream)) ; 1
)

' Extracts a value from the generator.
(def _ExtractingStream() =>
    _BaseStream(
        def(gen) let val(generator:value(gen))
        => { generator:next(gen), val } ; sys:defined(val)
    )
)

(def _FlatmappingStream(flatmapper, prev) =>
    _PostFlatBaseStream(
        def(gen) let val(prev(\_transValue)(gen))
            => { val(0), flatmapper(val(1)) } ; sys:defined(val)
    )
)

(def _PostFlatFlatmappingStream(flatmapper, prev) =>
    _PostFlatBaseStream(
        def(gen) let val(prev(\_transValue)(gen))
            => { val(0), val(1) flatmap flatmapper } ; sys:defined(val)
    )
)

(def _MappingStream(mapper, prev) =>
    _BaseStream(
        def(gen) let val(prev(\_transValue)(gen))
            => { val(0), mapper(val(1)) } ; sys:defined(val)
    )
)

(def _PostFlatMappingStream(mapper, prev) =>
    _PostFlatBaseStream(
        def(gen) let val(prev(\_transValue)(gen))
            => { val(0), val(1) map mapper } ; sys:defined(val)
    )
)

(def _FilteringStream(filterer, prev) =>
    _BaseStream(
        def filt(gen) let val(prev(\_transValue)(gen))
            => sys:undefined ; !sys:defined(val)
            => val ; filterer(val(1))
            => filt(val(0)) ; 1
    )
)

(def _PostFlatFilteringStream(filterer, prev) =>
    _PostFlatBaseStream(
        def(gen) let val(prev(\_transValue)(gen))
            => { val(0), val(1) filter filterer } ; sys:defined(val)
    )
)

' Stream which implements a takeWhile operation.
(def _TakingStream(pred, prev) =>
    _BaseStream(
        def(gen) let val(prev(\_transValue)(gen))
            => val ; sys:defined(val) && pred(val(1))
    )
)

(def _PostFlatTakingStream(pred, prev) =>
    _PostFlatBaseStream(
        def(gen) let val(prev(\_transValue)(gen))
            => { val(0), val(1) takeWhile pred } ; sys:defined(val)
    )
)

(def _SkippingStream(pred, prev) =>
    _BaseStream(
        def skip(gen) let val(prev(\_transValue)(gen))
            => sys:undefined ; !sys:defined(val)
            => skip(val(0)) ; pred(val(1))
            => val ; 1
    )
)

(def _PostFlatSkippingStream(pred, prev) =>
    _PostFlatBaseStream(
        def(gen) let val(prev(\_transValue)(gen))
        => { val(0), val(1) skipWhile pred } ; sys:defined(val)
    )
)

' Efficient zipping is currently only implemented on streams that
' have not been flatmapped.
(def _ZippingStream(other, prev) =>
    _BaseStream(
        def(gen)
            => _zipTransInitial(other, prev, gen) ; sys:typeof(gen) = "function"
            => _zipTransNonInit(other, prev, gen) ; 1
    )
)

(def _zipTransInitial(other, prev, gen)
    let val(prev(\_transValue)(gen)),
        otherVal(head(other))
    => {
        { val(0), tail(other) },
        { val(1), otherVal }
    } ; sys:defined(val) && sys:defined(otherVal)
)

(def _zipTransNonInit(other, prev, gen)
    let val(prev(\_transValue)(gen(0))),
        otherVal(head(gen(1)))
    => {
        { val(0), tail(gen(1)) },
        { val(1), otherVal }
    } ; sys:defined(val) && sys:defined(otherVal)
)

' Returns the transformed value for the given generator, using the operations
' defined by the given stream. The result is a vect of two elements: the first
' is the next generator to use, and the second is the resultant value. Returns
' `undefined` if the stream is exhausted with the given generator.
def _transValue(stream, gen) => stream(\_transValue)(gen)

' Helper function for folding streams. The folding stops when the
' value returned by the transformations is `undefined`.
(def _folder(stream, func) =>
    (def impl(gen, ac)
        let val(_transValue(stream, gen))
        => impl(val(0), func(ac, val(1))) ; sys:defined(val)
        => ac ; 1
    )
)

' Ditto for flatmapped streams.
(def _postFlatFolder(stream, func) =>
    (def impl(gen, ac)
        let val(_transValue(stream, gen))
        => impl(val(0), val(1) fold (ac, func)) ; sys:defined(val)
        => ac ; 1
    )
)
