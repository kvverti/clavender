' The list namespace defines the list function and other useful
' operations on lists. The list defined here is a linked list,
' in contrast to the built in vect type, which is random access.

@import global using _
@import generator

' Returns a linked list with the given head and tail.
' Lists can use all of the basic functional operators
' defined in the global namespace except those which
' rely on random access (slice and indexing).
(def List(head, tail) =>
    (def obj(a)
        => __yes__ ; a = __object__
        => 1 + len(tail) ; a = \len
        => "[ " ++ (\obj fold ("", def(a, b) => a ++ str(b) ++ " ")) ++ "]" ; a = \str
        => (def(el) => head = el || (el in tail)) ; a = \in\
        => (def(f) => f(head) :: (tail map f)) ; a = \map\
        => (def(f) => f(head) ++ (tail flatmap f)) ; a = \flatmap\
        => (def(f)
            => head :: (tail filter f) ; f(head)
            => tail filter f ; 1
        ) ; a = \filter\
        => (def(id, f) => tail fold (f(id, head), f)) ; a = \fold\
        => (def(list2) => head :: (tail ++ list2)) ; a = \++\
        => \obj fold ({}, def(ac, el)
            => sys:cat(ac, { el }) ; sys:typeof(el) = "vect"
            => sys:cat(ac, el) ; 1
        ) ; a = \toVect\
    )
)

' The empty list. Nil is a synonym for Unit.
def Nil() => Unit

' Returns a singleton list of the given value.
def Single(a) => a :: Nil

' The list cons operator. The first parameter is the new head
' while the second parameter is an existing tail list (which may
' be Nil). This function may be used to build up lists in a natural manner.
def r_::(head, tail) => List(head, tail)

' Returns the head of the given list.
def head(list) => sys:cval(list, 0)

' Returns the tail of the given list.
def tail(list) => sys:cval(list, 1)

' Uses the given generator to generate a list.
' The generator is iterated until it returns `undefined`.
' The generator should be finitely iterable.
(def mklist(gen)
    let val(generator:value(gen))
    => val :: mklist(generator:next(gen)) ; sys:defined(val)
    => Nil ; 1
)
