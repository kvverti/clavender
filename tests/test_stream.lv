@import global using _
@import hof using bindRight
@import generator
@import stream using Stream, Indices, take, skip
@import assert using assert
@import test

def vect(a) => a map \Vect fold ({}, \++\)

def S1() => Indices
def S2() => Indices takeWhile bindRight(\<\, 5)
def Fib() => stream:recursive(\+\, 0, 1)
def Fac() => stream:indexRecursive(\*\, 1)

def flatmapFunc(a) => { a, a * 2 }
def filterFunc(a) => a % 2 = 1

def main(args) => test:format(
    assert(vect(S2) = { 0, 1, 2, 3, 4 }, "S2 elems"),
    assert(vect(S1
        takeWhile bindRight(\<\, 5)
        map bindRight(\*\, 2)) = { 0, 2, 4, 6, 8 }, "S1 takeWhile map"),
    assert(vect(S1
        map bindRight(\*\, 2)
        takeWhile bindRight(\<\, 5)) = { 0, 2, 4 }, "S1 map takeWhile"),
    assert(vect(Fib take 5) = { 0, 1, 1, 2, 3 }, "Fib"),
    assert(vect(Fac take 5) = { 1, 1, 2, 6, 24 }, "Fac"),
    assert(head(Fib) = 0, "head Fib"),
    assert(head(tail(Fib)) = 1, "head tail Fib"),
    assert(vect(S2 flatmap \flatmapFunc) = { 0, 0, 1, 2, 2, 4, 3, 6, 4, 8 }, "S2 flatmap"),
    assert(vect(Fib filter \filterFunc take 5) = { 1, 1, 3, 5, 13 }, "Fib filter"),
    assert(vect(Fib zip Fac take 5) = {{ 0, 1 }, { 1, 1 }, { 1, 2 }, { 2, 6 }, { 3, 24 }}, "Fib zip Fac"),
    assert(vect(S2 ++ S2) = { 0, 1, 2, 3, 4, 0, 1, 2, 3, 4 }, "S2 ++ S2"),
    assert(vect((S2 flatmap \flatmapFunc) ++ { "hello", 3 }) = { 0, 0, 1, 2, 2, 4, 3, 6, 4, 8, "hello", 3 }, "S2 flatmap ++"),
    assert(vect(Fac takeWhile bindRight(\<\, 10)) = { 1, 1, 2, 6 }, "Fac takeWhile"),
    assert(vect(Fac skipWhile bindRight(\<\, 10) take 3) = { 24, 120, 720 }, "Fac skipWhile"),
    assert(vect(S2 skip 3) = { 3, 4 }, "S2 skip 3"),
    assert(vect(S2 skip 18) = {}, "S2 skip 18")
)
